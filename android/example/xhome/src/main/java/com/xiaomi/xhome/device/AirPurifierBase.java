/* Automatic generated by DDD2Clazz */

package com.xiaomi.xhome.device;

import android.os.Parcel;
import android.os.Parcelable;
import android.util.Log;

import com.miot.common.abstractdevice.AbstractDevice;
import com.miot.common.device.Device;
import com.miot.common.device.Service;

public class AirPurifierBase extends AbstractDevice {

    private static final String TAG = AirPurifierBase.class.getSimpleName();
    private static final Object classLock = AirPurifierBase.class;
    private static final String DEVICE_TYPE = "AirPurifierBase";
    public static final String SERVICE_AirPurifierBaseService = "urn:schemas-mi-com:service:AirPurifier:BaseService:1";
//    public AirPurifierBaseService myAirPurifierBaseService = new AirPurifierBaseService(this);
//    public ActionPermission actionPermission = null;

    public static AirPurifierBase create(Device device) {
        Log.d(TAG, "create");

        synchronized (classLock) {
            AirPurifierBase thiz = null;
            do {
                String deviceType = device.getType().getClassType() + device.getType().getSubType();
                if (!deviceType.equals(DEVICE_TYPE)) {
                    break;
                }

                thiz = new AirPurifierBase();
                if (!thiz.init(device)) {
                    thiz = null;
                }
            } while (false);

            return thiz;
        }
    }

    private boolean init(Device device) {
        boolean ret = false;

        do {
            if (device == null) {
                break;
            }

            Service svcAirPurifierBaseService = device.getService(SERVICE_AirPurifierBaseService);
            if (svcAirPurifierBaseService == null) {
                break;
            }
//            this.myAirPurifierBaseService.setService(svcAirPurifierBaseService);

            this.setDevice(device);

//            this.actionPermission = device.getActionPermission();
//            this.myAirPurifierBaseService.setActionPermission(actionPermission);

            ret = true;
        } while (false);

        return ret;
    }

    //-------------------------------------------------------
    // Parcelable 
    //-------------------------------------------------------
    public static final Parcelable.Creator<AirPurifierBase> CREATOR = new Parcelable.Creator<AirPurifierBase>() {

        @Override
        public AirPurifierBase createFromParcel(Parcel in) {
            return new AirPurifierBase(in);
        }

        @Override
        public AirPurifierBase[] newArray(int size) {
            return new AirPurifierBase[size];
        }
    };

    private AirPurifierBase() {
    }

    private AirPurifierBase(Parcel in) {
        readFromParcel(in);
    }

    public void readFromParcel(Parcel in) {
        Device device = in.readParcelable(Device.class.getClassLoader());

        if (!this.init(device)) {
            Log.d(TAG, "init from device failed!");
        }
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel out, int flags) {
        out.writeParcelable(this.getDevice(), flags);
    }
}
