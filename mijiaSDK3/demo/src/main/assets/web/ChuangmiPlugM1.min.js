/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* This file is auto-generated.*/

	var _PlugBaseService = __webpack_require__(1);

	var _PlugBaseService2 = _interopRequireDefault(_PlugBaseService);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ChuangmiPlugM1 = function () {
	    function ChuangmiPlugM1(deviceId) {
	        _classCallCheck(this, ChuangmiPlugM1);

	        this.deviceId = deviceId;
	        this.deviceManipulator = new DeviceManipulator();
	        this.plugBaseService = new _PlugBaseService2.default(deviceId, this.deviceManipulator);
	    }

	    _createClass(ChuangmiPlugM1, [{
	        key: 'getDeviceName',
	        value: function getDeviceName(handler) {
	            var infos = [];
	            infos.push('deviceName');
	            var body = {
	                deviceId: this.deviceId,
	                infoList: infos
	            };
	            this.deviceManipulator.getInfo(body, function (error, result) {
	                if (error) {
	                    handler(error);
	                } else {
	                    handler(null, result.deviceName);
	                }
	            });
	        }
	    }, {
	        key: 'getAddress',
	        value: function getAddress(handler) {
	            var infos = [];
	            infos.push('address');
	            var body = {
	                deviceId: this.deviceId,
	                infoList: infos
	            };
	            this.deviceManipulator.getInfo(body, function (error, result) {
	                if (error) {
	                    handler(error);
	                } else {
	                    handler(null, result.address);
	                }
	            });
	        }
	    }], [{
	        key: 'create',
	        value: function create(deviceId, handler) {
	            var device = new ChuangmiPlugM1(deviceId);
	            device.deviceManipulator.init(function (error, result) {
	                if (error) {
	                    handler(error);
	                } else {
	                    handler(null, device);
	                }
	            });
	        }
	    }]);

	    return ChuangmiPlugM1;
	}();

	module.exports = ChuangmiPlugM1;

	(function () {
	    if (window) {
	        window.ChuangmiPlugM1 = ChuangmiPlugM1;
	    }
	})();

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/* This file is auto-generated.*/

	var SERVICE_TYPE = 'urn:schemas-mi-com:service:Plug:BaseService:1';

	var PlugBaseService = function () {
	    function PlugBaseService(deviceId, deviceManipulator) {
	        _classCallCheck(this, PlugBaseService);

	        this.deviceId = deviceId;
	        this.deviceManipulator = deviceManipulator;
	    }

	    _createClass(PlugBaseService, [{
	        key: 'setPower',
	        value: function setPower(power, handler) {
	            var args = {
	                Power: power
	            };
	            var action = {
	                deviceId: this.deviceId,
	                serviceType: SERVICE_TYPE,
	                action: 'setPower',
	                argumentList: args
	            };
	            this.deviceManipulator.invoke(action, handler);
	        }
	    }, {
	        key: 'setWifiLed',
	        value: function setWifiLed(wifiLed, handler) {
	            var args = {
	                WifiLed: wifiLed
	            };
	            var action = {
	                deviceId: this.deviceId,
	                serviceType: SERVICE_TYPE,
	                action: 'setWifiLed',
	                argumentList: args
	            };
	            this.deviceManipulator.invoke(action, handler);
	        }
	    }, {
	        key: 'subscribeNotifications',
	        value: function subscribeNotifications(handler, listener) {
	            var notificationInfo = {
	                deviceId: this.deviceId,
	                serviceType: SERVICE_TYPE,
	                timeout: 0
	            };
	            this.deviceManipulator.subscribeNotifications(notificationInfo, handler, listener);
	        }
	    }, {
	        key: 'unsubscribeNotifications',
	        value: function unsubscribeNotifications(handler) {
	            var notificationInfo = {
	                deviceId: this.deviceId,
	                serviceType: SERVICE_TYPE,
	                timeout: 0
	            };
	            this.deviceManipulator.unsubscribeNotifications(notificationInfo, handler);
	        }
	    }]);

	    return PlugBaseService;
	}();

	module.exports = PlugBaseService;

/***/ }
/******/ ]);